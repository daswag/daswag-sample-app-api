AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: |
  SAM Template used to create and deploy the Api on AWS
Parameters:
  ProjectName:
    Description: The name of the project
    Type: String
  StageName:
    Description: 'The name of the stage, e.g. "dev", "preprod", "prod"'
    Default: dev
    Type: String
  TableName:
    Description: the name of DynamoDB Table to use
    Type: String
Globals:
  Function:
    Runtime: python3.7
Resources:
  ApiGatewayRestApi:
    Type: 'AWS::Serverless::Api'
    Properties:
      Name: !<!Sub> '${ProjectName}-${StageName}'
      StageName: !<!Ref> StageName
      TracingEnabled: true
      EndpointConfiguration: Regional
      AccessLogSetting:
        DestinationArn: !<!GetAtt> ApiLogGroup.Arn
        Format: >-
          { 'requestId':'$context.requestId', 'ip':
          '$context.identity.sourceIp', 'caller':'$context.identity.caller',
          'user':'$context.identity.user',
          'user-agent':'$context.identity.userAgent',
          'identity-id':'$context.identity.cognitoIdentityId',
          'requestTime':'$context.requestTime',
          'httpMethod':'$context.httpMethod','resourcePath':'$context.resourcePath',
          'status':'$context.status','protocol':'$context.protocol',
          'responseLength':'$context.responseLength' }
      DefinitionBody:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: specs/specs.yaml
  ApiLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !<!Sub> '${ProjectName}-${StageName}'
  ApiSettings:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !<!GetAtt> CloudWatchRole.Arn
  CloudWatchRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !<!Sub> '${ProjectName}-${StageName}-api-logs-write'
      AssumeRolePolicyDocument:
        Version: 2012-10-17T00:00:00.000Z
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - >-
          arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  Table:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !<!Ref> TableName
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
  GetAllTodosFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName:
        class: Sub
        name: Sub
        data: '${ProjectName}-${StageName}-GetAllTodos'
      Handler: src.handlers.todos.get_all_todos.get_all_todos
      Description: Get all Todo items
      Timeout: 2
      MemorySize: 256
      Tracing: Active
      AutoPublishAlias: live
      Events:
        Resource:
          Type: Api
          Properties:
            RestApiId:
              class: Ref
              name: Ref
              data: ApiGatewayRestApi
            Path: /todos
            Method: get
  CreateTodoFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName:
        class: Sub
        name: Sub
        data: '${ProjectName}-${StageName}-CreateTodo'
      Handler: src.handlers.todos.create_todo.create_todo
      Description: Create a new Todo item
      Timeout: 2
      MemorySize: 256
      Tracing: Active
      AutoPublishAlias: live
      Events:
        Resource:
          Type: Api
          Properties:
            RestApiId:
              class: Ref
              name: Ref
              data: ApiGatewayRestApi
            Path: /todos
            Method: post
  GetTodoFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName:
        class: Sub
        name: Sub
        data: '${ProjectName}-${StageName}-GetTodo'
      Handler: src.handlers.todos.get_todo.get_todo
      Description: Get a todo item by it's identifier
      Timeout: 2
      MemorySize: 256
      Tracing: Active
      AutoPublishAlias: live
      Events:
        Resource:
          Type: Api
          Properties:
            RestApiId:
              class: Ref
              name: Ref
              data: ApiGatewayRestApi
            Path: '/todos/{idTodo}'
            Method: get
  UpdateTodoFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName:
        class: Sub
        name: Sub
        data: '${ProjectName}-${StageName}-UpdateTodo'
      Handler: src.handlers.todos.update_todo.update_todo
      Description: Update a Todo item
      Timeout: 2
      MemorySize: 256
      Tracing: Active
      AutoPublishAlias: live
      Events:
        Resource:
          Type: Api
          Properties:
            RestApiId:
              class: Ref
              name: Ref
              data: ApiGatewayRestApi
            Path: '/todos/{idTodo}'
            Method: put
  DeleteTodoFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName:
        class: Sub
        name: Sub
        data: '${ProjectName}-${StageName}-DeleteTodo'
      Handler: src.handlers.todos.delete_todo.delete_todo
      Description: Delete a Todo item
      Timeout: 2
      MemorySize: 256
      Tracing: Active
      AutoPublishAlias: live
      Events:
        Resource:
          Type: Api
          Properties:
            RestApiId:
              class: Ref
              name: Ref
              data: ApiGatewayRestApi
            Path: '/todos/{idTodo}'
            Method: delete
Outputs:
  RestApi:
    Description: API Gateway endpoint URL
    Value:
      'Fn::Join':
        - ''
        - - 'https://'
          - Ref: ApiGatewayRestApi
          - .execute-api.
          - Ref: 'AWS::Region'
          - .amazonaws.com/
          - Ref: StageName
  ApiGatewayRestApi:
    Value: !<!Ref> ApiGatewayRestApi
    Description: Name of the ApiGatewayRestApi
