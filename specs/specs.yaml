openapi: 3.0.1
info:
  version: 1.0.0
  title: DaswagSampleAppApi
  description: >
    ## Overview

    This is the backend API which is used by the clients to talk to the backend
    services.

    All the API endpoints are HTTPS only and require authentication through
    dedicated identity provider.


    The API is deployed to [AWS
    APIGateway](https://aws.amazon.com/api-gateway/), with each endpoint mapped
    to a dedicated [AWS Lambda](https://aws.amazon.com/lambda/) function.


    It is meant to be as
    [RESTful](http://en.wikipedia.org/wiki/Representational_state_transfer) as
    possible, however some specificities due to using AWS and the constant
    evolution of the product might appear. They are documented when applicable.


    ## Conventions

    ### HTTP Methods
      - Retrieving an item is done via the GET method, and returns either an object, specific properties from an object, or a `message` object reponse.
      - Adding a new item is done via the POST method, and returns the id of the object created.
      - Editing/Updating an item is done via the PUT method, and returns the full object.
      - Deleting an item is done via the DELETE method, and returns a `message` object.

    ### The `message` object
      The `message` object is used to return a standard response to API operations that result in a boolean, and for all the error messages.
  termsOfService: 'https://www.daswag.tech/terms/'
  contact:
    name: daSWAG Team
    email: support@daswag.tech
    url: 'https://www.daswag.tech'
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
paths:
  /todos:
    options:
      tags:
        - Todos
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: |
            { "statusCode": 200 }
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS, GET, POST'''
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
        type: mock
    get:
      summary: Get all Todo items
      description: Get all Todo items
      operationId: GetAllTodos
      security:
        - default: []
      responses:
        '200':
          description: Get all Todo items
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoItem'
        default:
          description: unexpected error
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        uri:
          'Fn::Sub': >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAllTodosFunction.Arn}:live/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
    post:
      summary: Create a new Todo item
      description: Create a new Todo item
      operationId: CreateTodo
      security:
        - default: []
      responses:
        '200':
          description: Create a new Todo item
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoItem'
        default:
          description: unexpected error
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        uri:
          'Fn::Sub': >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateTodoFunction.Arn}:live/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
  '/todos/{idTodo}':
    parameters:
      - in: path
        name: idTodo
        schema:
          type: string
        required: true
        description: Idenfier of a Todo item
    options:
      tags:
        - Todos
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: |
            { "statusCode": 200 }
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS, GET, PUT, DELETE'''
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
        type: mock
    get:
      summary: Get a todo item by it's identifier
      description: Get a todo item by it's identifier
      operationId: GetTodo
      security:
        - default: []
      responses:
        '200':
          description: Get a todo item by it's identifier
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoItem'
        default:
          description: unexpected error
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        uri:
          'Fn::Sub': >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTodoFunction.Arn}:live/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
    put:
      summary: Update a Todo item
      description: Update a Todo item
      operationId: UpdateTodo
      security:
        - default: []
      responses:
        '200':
          description: Update a Todo item
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoItem'
        default:
          description: unexpected error
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        uri:
          'Fn::Sub': >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateTodoFunction.Arn}:live/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
    delete:
      summary: Delete a Todo item
      description: Delete a Todo item
      operationId: DeleteTodo
      security:
        - default: []
      responses:
        '200':
          description: Delete a Todo item
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoItem'
        default:
          description: unexpected error
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        uri:
          'Fn::Sub': >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteTodoFunction.Arn}:live/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
components:
  schemas:
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
        message:
          type: string
    TodoItem:
      type: object
      required:
        - id
        - updatedAt
        - title
      properties:
        id:
          type: string
        updatedAt:
          type: string
        title:
          type: string
        content:
          type: string
  securitySchemes:
    default:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: awsSigv4
x-amazon-apigateway-request-validators:
  Validate body:
    validateRequestParameters: false
    validateRequestBody: true
  Validate query string parameters and headers:
    validateRequestParameters: true
    validateRequestBody: false
